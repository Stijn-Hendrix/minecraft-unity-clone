#pragma kernel GenerateNoise

#include "Includes\FastNoiseLite.compute"

static const uint computeThreads = 8;
int _ChunkSizeHeight;
int _ChunkSizeWidth;

int _NoiseSeed;


RWStructuredBuffer<int> _Noise;

static int _NoiseScale = 1;
static int _Amplitude = 5;
static int _Frequency = 0.01;
static int _Octaves = 2;
static int _GroundPercent = 0.2;

int indexFromCoord(int x, int y, int z)
{
    return x + _ChunkSizeWidth * (y + _ChunkSizeHeight * z);
}

[numthreads(computeThreads, computeThreads, computeThreads)]
void GenerateNoise(uint3 id : SV_DispatchThreadID)
{
    fnl_state noise = fnlCreateState(_NoiseSeed);
    noise.noise_type = FNL_NOISE_OPENSIMPLEX2;

    float n = fnlGetNoise3D(noise, id.x, id.y, id.z) + 1;

    /*
    float n = 1;

    if (id.y > 5 && id.x > 2)
    {
        n = 2;
    }
    */

    _Noise[indexFromCoord(id.x, id.y, id.z)] = int(round(n));
}
