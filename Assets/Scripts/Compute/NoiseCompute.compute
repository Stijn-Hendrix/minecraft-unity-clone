#pragma kernel GenerateNoise

#include "Includes/FastNoiseLite.cginc"
#include "Includes/ChunkData.cginc"

static const uint computeThreads = 8;


int _NoiseSeed;

float3 _PositionOffset;

RWStructuredBuffer<int> _Noise;

static float _GroundPercent = 0.6f;
static float _Amplitude = 20;

int CheckBlockAt(float y, float3 samplePos, fnl_state ground, fnl_state ground1, fnl_state biome)
{
    float groundMask = (fnlGetNoise2D(ground1, samplePos.x, samplePos.z) + 1) / 2;
    float groundSample = (_ChunkSizeHeight * _GroundPercent + fnlGetNoise3D(ground, samplePos.x, samplePos.y, samplePos.z) * (_Amplitude * groundMask));

    bool isGround = y <= groundSample;

    int block = 0;

    if (isGround)
    {
        int biomeNoise = int(fnlGetNoise2D(biome, samplePos.x, samplePos.z) + 2); // range: 1 - 2

        block = biomeNoise;
    }
    return block;
}

int BlockAt(float y, float3 samplePos, fnl_state ground, fnl_state ground1, fnl_state biome)
{
    float groundLevel = _ChunkSizeHeight * _GroundPercent;

    int block = CheckBlockAt(y, samplePos, ground, ground1, biome);

    int blockAbove = CheckBlockAt(y + 1, float3(samplePos.x, samplePos.y + 1, samplePos.z), ground, ground1, biome);
    if (blockAbove == 0 && block == 1)
    {
        if (y + 1 > groundLevel)
        {
            block = 3;
        }
    }

    float stone = (fnlGetNoise3D(ground, samplePos.x, samplePos.y, samplePos.z) * (_Amplitude * 0.1));

    if (block != 0)
    {
        block = stone > 0 ? block : 4;
    }

    return block;
}

[numthreads(computeThreads, computeThreads, computeThreads)]
void GenerateNoise(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _ChunkSizeWidth + 2 || id.z >= _ChunkSizeWidth + 2)
    {
        return;
    }

    int groundLevel = _ChunkSizeHeight * _GroundPercent;

    fnl_state ground = fnlCreateState(_NoiseSeed);
    ground.noise_type = FNL_NOISE_OPENSIMPLEX2;
    ground.fractal_type = FNL_FRACTAL_RIDGED;

    fnl_state ground1 = fnlCreateState(_NoiseSeed + 2);
    ground1.noise_type = FNL_NOISE_OPENSIMPLEX2;
    ground1.frequency = 0.001;
    ground1.octaves = 5;

    fnl_state biome = fnlCreateState(_NoiseSeed + 1);
    biome.noise_type = FNL_NOISE_OPENSIMPLEX2;
    biome.fractal_type = FNL_FRACTAL_RIDGED;
    biome.frequency = 0.001;

    // Sample the noise so that there exist edges around the chunk
    float3 samplePos = float3(
            float(id.x) + _PositionOffset.x - 1,
            float(id.y) + _PositionOffset.y,
            float(id.z) + _PositionOffset.z - 1
        );

    int block = BlockAt(id.y, samplePos, ground, ground1, biome);

    
   _Noise[indexFromCoord(id.x, id.y, id.z)] = block;
}
