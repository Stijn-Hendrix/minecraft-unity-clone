#pragma kernel GenerateNoise

#include "Includes/FastNoiseLite.cginc"
#include "Includes/ChunkData.cginc"

static const uint computeThreads = 8;


int _NoiseSeed;

float3 _PositionOffset;

RWStructuredBuffer<int> _Noise;

static float _GroundPercent = 0.6f;
static float _Amplitude = 20;


[numthreads(computeThreads, computeThreads, computeThreads)]
void GenerateNoise(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _ChunkSizeWidth + 2 || id.z >= _ChunkSizeWidth + 2)
    {
        return;
    }

    fnl_state noise = fnlCreateState(_NoiseSeed);
    noise.noise_type = FNL_NOISE_OPENSIMPLEX2;
    noise.fractal_type = FNL_FRACTAL_RIDGED;

    // Sample the noise so that there exist edges around the chunk
    float n = _ChunkSizeHeight * _GroundPercent + fnlGetNoise3D(noise, id.x + _PositionOffset.x - 1, id.y + _PositionOffset.y, id.z + _PositionOffset.z - 1) * _Amplitude;

    float above = _ChunkSizeHeight * _GroundPercent + fnlGetNoise3D(noise, id.x + _PositionOffset.x - 1, id.y + 5 + _PositionOffset.y, id.z + _PositionOffset.z - 1) * _Amplitude;

    above = id.y >= above ? 0 : 1;

    n = id.y >= n ? 0 : 1;

    if (above == 1)
    {
        n = 2;
    }

    _Noise[indexFromCoord(id.x, id.y, id.z)] = int(round(n));
}
